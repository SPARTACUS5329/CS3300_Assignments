float stackHeight(int numOfGlasses, int currentStackHeight, int newNumOfGlasses, int heightOfOneGlass)
{
    int diffHeight;
    int glasses;
    float extraHeightPerGlass;
    float ans;

    diffHeight = currentStackHeight - heightOfOneGlass;
    glasses = numOfGlasses - 1;
    extraHeightPerGlass = diffHeight / (glasses * 1.0);

    if (newNumOfGlasses == 1)
    {
        ans = heightOfOneGlass * 1.0;
    }
    else
    {
        if (newNumOfGlasses < 0)
        {
            ans = 0.0;
        }
        else
        {
            ans = heightOfOneGlass + diffHeight * (newNumOfGlasses - 1);
        }
    }

    return ans;
}

int getMax(int arr[], int n)
{
    int i;
    int ans;
    ans = -1;
    for (i = 0; i < n; i++)
    {
        if (ans < arr[i])
        {
            ans = arr[i];
        }
    }

    return ans;
}

int getMinIndex(int arr[], int n)
{
    int i;
    int ans;
    int ansIndex;
    ans = arr[0];
    ansIndex = 0;
    for (i = 0; i < n; i++)
    {
        if (ans > arr[i])
        {
            ans = arr[i];
            ansIndex = i;
        }
    }

    return ansIndex;
}

int random(int A, int C, int M, int X)
{
    int Z;
    Z = A * X;
    Z = Z + C;
    Z = Z % M;

    return Z;
}

int getIntersection(int arr1[], int size1, int arr2[], int size2)
{
    int i;
    int j;
    i = 0;
    j = 0;
    int size;
    int count;
    count = 0;
    size = size1;
    if (size1 > size2)
    {
        size = size2;
    }
    while (i < size)
    {
        if (j < size)
        {
            if (arr1[i] < arr2[j])
            {
                i = i + 1;
            }
            else if (arr1[i] > arr2[j])
            {
                j = j + 1;
            }
            else
            {
                i = i + 1;
                j = j + 1;
                count = count + 1;
            }
        }
        else
        {
            i = i + 1;
        }
    }
    return count;
}

int getUnion1(int arr1[], int size1, int arr2[], int size2)
{
    int i;
    int j;
    i = 0;
    j = 0;
    int size;
    int count;
    count = 0;
    size = size1;
    if (size1 > size2)
    {
        size = size2;
    }
    while (i < size)
    {
        if (j < size)
        {
            if (arr1[i] < arr2[j])
            {
                i = i + 1;
            }
            else if (arr1[i] > arr2[j])
            {
                j = j + 1;
            }
            else
            {
                i = i + 1;
                j = j + 1;
            }
            count = count + 1;
        }
        else
        {
            i = i + 1;
            count = count + 1;
        }
    }

    count = count + size2 - j;
    return count;
}

int getUnion2(int arr1[], int size1, int arr2[], int size2)
{
    int intersect = getIntersection(arr1, size1, arr2, size2);
    return size1 + size2 - intersect;
}

float getProbability(int events, int sampleSpace)
{
    if (sampleSpace == 0)
    {
        return 0.0;
    }
    if (events >= sampleSpace)
    {
        return 1.0;
    }
    return events / (1.0 * sampleSpace);
}

float getConditionalProbability(float pa, float panb)
{
    float ans = panb / pa;
    return ans;
}

int main()
{
    int ans1;
    int ans2;
    float ans3;
    int n;
    n = 100;
    int arr[n];
    int i;

    arr[0] = 16;

    for (i = 0; i < n - 1; i++)
    {
        arr[i + 1] = random(47, 98, n, arr[i]);
        printf("%d ",arr[i+1]);
    }
    printf("\n");

    ans1 = getMinIndex(arr, n);
    ans2 = getMax(arr, n);

    if (ans1 <= 0 || ans2 <= 0 || ans1 > 1000 || ans2 > 1000)
    {
        printf("Invalid array sizes.\n");
    }
    else
    {
        int arr1[ans1];
        int arr2[ans2];

        for (i = 0; i < ans1; i++)
        {
            arr1[i] = i * 2;
        }

        for (i = 0; i < ans2; i++)
        {
            arr2[i] = i * 3 / 2;
        }

        int sampleSpace;
        sampleSpace = getUnion1(arr1, ans1, arr2, ans2);
        int intersect;
        intersect = getIntersection(arr1, ans1, arr2, ans2);

        int sampleSpace2;
        sampleSpace2 = getUnion2(arr1, ans1, arr2, ans2);

        if (sampleSpace2 == sampleSpace)
        {
            float probArr1;
            float probArr2;
            float probArr1nArr2;
            float prob1Given2;
            float prob2Given1;

            probArr1 = getProbability(ans1, sampleSpace);
            probArr2 = getProbability(ans2, sampleSpace);
            probArr1nArr2 = getProbability(intersect, sampleSpace);

            prob1Given2 = getConditionalProbability(probArr2, probArr1nArr2);
            prob2Given1 = getConditionalProbability(probArr1, probArr1nArr2);

            printf("P(A1) = %f\n", probArr1);
            printf("P(A2) = %f\n", probArr2);
            printf("P(A1 intersect A2) = %f\n", probArr1nArr2);
            printf("P(A1 | A2) = %f\n", prob1Given2);
            printf("P(A2 | A1) = %f\n", prob2Given1);
        }
        else
        {
            printf("Something wrong with the union or intersection operation ");
        }
    }
    return 0;
}