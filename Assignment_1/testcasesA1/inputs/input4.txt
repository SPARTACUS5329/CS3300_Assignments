int modulo(int dividend, int divisor)
{
    int quotient;
    int remainder;
    if (divisor == 0)
    {
        return -1;
    }
    quotient = dividend / divisor;

    remainder = dividend - (quotient * divisor);

    return remainder;
}

int random(int A, int C, int M, int X)
{
    int Z;
    Z = A * X;
    Z = Z + C;
    Z = modulo(Z, M);

    return Z;
}

void initializeArrayZeroOne(int rows, int cols, int arr[rows][cols])
{
    int i;
    int j;
    int tmp;
    tmp = 23;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            tmp = random(27, 32, 100, tmp);
            arr[i][j] = modulo(tmp, 2);
        }
    }
}

void initializeArray(int rows, int cols, int arr[rows][cols])
{
    int i;
    int j;
    int tmp;
    tmp = 23;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            tmp = random(27, 32, 100, tmp);
            arr[i][j] = tmp;
        }
    }
}

int linearSearch(int arr[], int size, int target)
{
    int i;
    for (i = 0; i < size; i = i + 1)
    {
        if (arr[i] == target)
        {
            return i;
        }
    }
    return -1;
}

int binarySearch(int arr[], int size, int target)
{
    int left;
    int right;
    int mid;

    left = 0;
    right = size - 1;

    while (left <= right)
    {

        mid = left + (right - left) / 2;

        if (arr[mid] == target)
        {
            return mid;
        }

        if (arr[mid] < target)
        {
            left = mid + 1;
        }

        else
        {
            right = mid - 1;
        }
    }

    return -1;
}

void bubbleSort(int arr[], int size)
{
    int i;
    int j;
    int temp;
    for (i = 0; i < size - 1; i = i + 1)
    {
        for (j = 0; j < size - i - 1; j = j + 1)
        {
            if (arr[j] > arr[j + 1])
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void selectionSort(int arr[], int size)
{
    int i;
    int j;
    int minIndex;
    int temp;

    for (i = 0; i < size - 1; i = i + 1)
    {

        minIndex = i;
        for (j = i + 1; j < size; j = j + 1)
        {
            if (arr[j] < arr[minIndex])
                minIndex = j;
        }

        temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}

void insertionSort1Wrong(int arr[], int size)
{
    int i;
    int key;
    int j;
    for (i = 1; i < size; i = i + 1)
    {
        key = arr[i];
        j = i - 1;

        while (j >= 0)
        {
            if (arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            else
            {
                j = j - 1;
            }
        }
        arr[j + 1] = key;
    }
}

void insertionSort2Wrong(int arr[], int size)
{
    int i;
    int key;
    int j;
    for (i = 1; i < size; i++)
    {
        key = arr[i];
        j = i - 1;

        if (j >= 0)
        {
            if (arr[j] > key)
            {

                while (j >= 0)
                {
                    if (arr[j] > key)
                    {
                        arr[j + 1] = arr[j];
                        j = j - 1;
                    }
                }
                arr[j + 1] = key;
            }
            else
            {
                arr[j + 1] = key;
            }
        }
        else
        {
            arr[j + 1] = key;
        }
    }
}

void insertionSort(int arr[], int size)
{
    int i;
    int key;
    int j;

    for (i = 1; i < size; i = i + 1)
    {
        key = arr[i];
        j = i - 1;

        while (j >= 0)
        {
            if (arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            else
            {
                arr[j + 1] = key;
                j = -1;
            }
        }

        if (j != -1)
        {
            arr[j + 1] = key;
        }
    }
}

void shellSort(int arr[], int n)
{
    int i;
    int j;
    int temp;
    int gap;

    for (gap = n / 2; gap > 0; gap = gap / 2)
    {

        for (i = gap; i < n; i = i + 1)
        {
            temp = arr[i];
            j = i;

            while (j >= gap)
            {
                if (arr[j - gap] > temp)
                {
                    arr[j] = arr[j - gap];
                    j -= gap;
                }
                else
                {
                    arr[j] = temp;
                    j = -1;
                }
            }
            if (j >= 0)
            {
                arr[j] = temp;
            }
        }
    }
}

void countOnesInRows(int rows, int cols, int arr[rows][cols], int onesCount[rows])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        onesCount[i] = 0;

        for (j = 0; j < cols; j = j + 1)
        {
            if (arr[i][j] == 1)
            {
                onesCount[i]++;
            }
        }
    }
}

void countZerosInColumns(int rows, int cols, int arr[rows][cols], int zerosCount[cols])
{
    int j;
    int i;
    for (j = 0; j < cols; j = j + 1)
    {
        zerosCount[j] = 0;
        for (i = 0; i < rows; i = i + 1)
        {
            if (arr[i][j] == 0)
            {
                zerosCount[j]++;
            }
        }
    }
}

void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i = i + 1)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

float performOperation(float a, float b, char operator)
{
    if (operator== '+')
    {
        return a + b;
    }
    else if (operator== '-')
    {
        return a - b;
    }
    else if (operator== '*')
    {
        return a * b;
    }
    else if (operator== '/')
    {
        if (b != 0)
        {
            return a / b;
        }
        else
        {
            printf("Error! Division by zero.\n");
            return 0;
        }
    }
    else
    {
        printf("Error! Operator is not correct.\n");
        return 0;
    }
}

void compareInt(int a, int b)
{
    if (a == b)
    {
        printf("%d is equal to %d\n", a, b);
    }

    else if (a != b)
    {
        printf("%d is not equal to %d\n", a, b);
    }

    if (a > b)
    {
        printf("%d is greater than %d\n", a, b);
    }

    if (a < b)
    {
        printf("%d is less than %d\n", a, b);
    }

    if (a >= b)
    {
        printf("%d is greater than or equal to %d\n", a, b);
    }

    if (a <= b)
    {
        printf("%d is less than or equal to %d\n", a, b);
    }
}

void compareFloat(float a, float b)
{
    if (a == b)
    {
        printf("%d is equal to %d\n", a, b);
    }

    else if (a != b)
    {
        printf("%d is not equal to %d\n", a, b);
    }

    if (a > b)
    {
        printf("%d is greater than %d\n", a, b);
    }

    if (a < b)
    {
        printf("%d is less than %d\n", a, b);
    }

    if (a >= b)
    {
        printf("%d is greater than or equal to %d\n", a, b);
    }

    if (a <= b)
    {
        printf("%d is less than or equal to %d\n", a, b);
    }
}

void compareChar(char a, char b)
{
    if (a == b)
    {
        printf("%d is equal to %d\n", a, b);
    }

    else if (a != b)
    {
        printf("%d is not equal to %d\n", a, b);
    }

    if (a > b)
    {
        printf("%d is greater than %d\n", a, b);
    }

    if (a < b)
    {
        printf("%d is less than %d\n", a, b);
    }

    if (a >= b)
    {
        printf("%d is greater than or equal to %d\n", a, b);
    }

    if (a <= b)
    {
        printf("%d is less than or equal to %d\n", a, b);
    }
}

void printQRCode(int size, int qr[size][size])
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (qr[i][j] == 1)
            {
                printf("#");
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }
}

void addMatrices(int rows, int cols, int a[rows][cols], int b[rows][cols], int result[rows][cols])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            result[i][j] = a[i][j] + b[i][j];
        }
    }
}

void subtractMatrices(int rows, int cols, int a[rows][cols], int b[rows][cols], int result[rows][cols])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            result[i][j] = a[i][j] - b[i][j];
        }
    }
}

void multiplyMatrices(int rows, int cols, int a[rows][cols], int b[rows][cols], int result[rows][cols])
{

    int i;
    int j;
    int k;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            result[i][j] = 0;
            for (k = 0; k < cols; k = k + 1)
            {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}

void hadamardProduct(int rows, int cols, int a[rows][cols], int b[rows][cols], int result[rows][cols])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            result[i][j] = a[i][j] * b[i][j];
        }
    }
}

void transposeMatrix(int rows, int cols, int matrix[rows][cols], int transpose[cols][rows])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            transpose[j][i] = matrix[i][j];
        }
    }
}

void printMatrix(int rows, int cols, int matrix[rows][cols])
{
    int i;
    int j;
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int isPalindrome(char str[])
{
    int left;
    int right;
    left = 0;
    right = 10;

    while (left < right)
    {
        if (str[left] != str[right])
        {
            return 0;
        }
        left = left + 1;
        right = right - 1;
    }
    return 1;
}

int integerSquareRoot1(int n)
{
    if (n < 0)
    {
        return -1;
    }

    if (n == 0)
    {
        return 0;
    }
    if (n == 1)
    {
        return 1;
    }

    int i;

    for (i = 1; i * i <= n; i = i + 1)
    {
        if (i * i == n)
        {
            return i;
        }
    }

    return -1;
}

int integerSquareRoot2(int n)
{
    if (n < 0)
    {
        return -1;
    }

    if (n == 0)
    {
        return 0;
    }
    if (n == 1)
    {
        return 1;
    }

    int low;
    int high;
    int mid;
    low = 1;
    high = n;

    while (low <= high)
    {
        mid = (low + high) / 2;

        int square = mid * mid;

        if (square == n)
        {
            return mid;
        }
        else if (square < n)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }

    return -1;
}

int isLeapYear(int year)
{

    int divisibleBy4 = modulo(year, 4) == 0;
    int divisibleBy100 = modulo(year, 100) == 0;
    int divisibleBy400 = modulo(year, 400) == 0;

    if (divisibleBy4)
    {
        if (divisibleBy100)
        {
            if (divisibleBy400)
            {
                return 1;
            }
            return 0;
        }
        return 1;
    }
    return 0;
}

int main()
{
    int n;
    n = 100;
    int arr[n];
    int i;
    int j;

    arr[0] = 16;

    for (i = 0; i < n - 1; i++)
    {
        arr[i + 1] = random(47, 98, n, arr[i]);
    }

    printf("\nBefore Bubble sort\n");
    printArray(arr, n);
    bubbleSort(arr, n);
    printf("\nAfter Bubble sort\n");
    printArray(arr, n);

    arr[0] = 16;

    for (i = 0; i < n - 1; i++)
    {
        arr[i + 1] = random(57, 73, n, arr[i]);
    }

    printf("\nBefore Insertion sort\n");
    printArray(arr, n);
    insertionSort(arr, n);
    printf("\nAfter Insertion sort\n");
    printArray(arr, n);

    arr[0] = 16;

    for (i = 0; i < n - 1; i++)
    {
        arr[i + 1] = random(77, 73, n, arr[i]);
    }

    printf("\nBefore Selection sort\n");
    printArray(arr, n);
    selectionSort(arr, n);
    printf("\nAfter Selection sort\n");
    printArray(arr, n);

    arr[0] = 16;

    for (i = 0; i < n - 1; i++)
    {
        arr[i + 1] = random(67, 43, n, arr[i]);
    }

    printf("\nBefore Shell sort\n");
    printArray(arr, n);
    shellSort(arr, n);
    printf("\nAfter Shell sort\n");
    printArray(arr, n);

    int target1 = 15;
    int target2 = 7;

    int linearResult1 = linearSearch(arr, n, target1);
    int linearResult2 = linearSearch(arr, n, target2);

    int binaryResult1 = binarySearch(arr, n, target1);
    int binaryResult2 = binarySearch(arr, n, target2);

    if (linearResult1 != -1)
    {
        printf("Linear search: Target %d found at index %d.\n", target1, linearResult1);
    }
    else
    {
        printf("Linear search: Target %d not found.\n", target1);
    }

    if (linearResult2 != -1)
    {
        printf("Linear search: Target %d found at index %d.\n", target2, linearResult2);
    }
    else
    {
        printf("Linear search: Target %d not found.\n", target2);
    }

    if (binaryResult1 != -1)
    {
        printf("Binary search: Target %d found at index %d.\n", target1, binaryResult1);
    }
    else
    {
        printf("Binary search: Target %d not found.\n", target1);
    }

    if (binaryResult2 != -1)
    {
        printf("Binary search: Target %d found at index %d.\n", target2, binaryResult2);
    }
    else
    {
        printf("Binary search: Target %d not found.\n", target2);
    }

    int rows = 3;
    int cols = 4;

    int arr2d[rows][cols];

    int onesCount[rows];
    int zerosCount[cols];

    initializeArrayZeroOne(rows, cols, arr2d);

    printf("The initialized 2D array:\n");
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }

    countOnesInRows(rows, cols, arr2d, onesCount);
    countZerosInColumns(rows, cols, arr2d, zerosCount);

    printf("Count of ones in each row:\n");
    for (i = 0; i < rows; i = i + 1)
    {
        printf("Row %d: %d ones\n", i, onesCount[i]);
    }

    printf("Count of zeros in each column:\n");
    for (j = 0; j < cols; j = j + 1)
    {
        printf("Column %d: %d zeros\n", j, zerosCount[j]);
    }

    printf("\n");

    float num1;
    float num2;
    char op;
    float result;
    num1 = 20.5;
    num2 = 12.3;
    op = '+';
    result = performOperation(num1, num2, op);
    printf("%f %c %f = %f\n", num1, op, num2, result);
    op = '-';
    result = performOperation(num1, num2, op);
    printf("%f %c %f = %f\n", num1, op, num2, result);
    op = '*';
    result = performOperation(num1, num2, op);
    printf("%f %c %f = %f\n", num1, op, num2, result);
    op = '/';
    result = performOperation(num1, num2, op);
    printf("%f %c %f = %f\n", num1, op, num2, result);

    printf("Comparing integers:\n");
    compareInt(5, 5);
    compareInt(5, 10);
    compareInt(15, 10);

    printf("\nComparing floats:\n");
    compareFloat(7.5f, 7.5f);
    compareFloat(7.6f, 7.5f);
    compareFloat(7.4f, 7.5f);

    printf("\nComparing characters:\n");
    compareChar('a', 'z');
    compareChar('z', 'z');
    compareChar('b', 'a');

    int arr2d2[rows][rows];

    initializeArrayZeroOne(rows, rows, arr2d2);

    printf("The initialized 2D array:\n");
    for (i = 0; i < rows; i = i + 1)
    {
        for (j = 0; j < cols; j = j + 1)
        {
            printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }

    printf("\nQR Code:\n");
    printQRCode(rows, arr2d2);

    int matrixA[rows][cols];
    int matrixB[rows][cols];

    initializeArray(rows, cols, matrixA);
    initializeArray(rows, cols, matrixB);

    int resultAdd[rows][cols];
    int resultSubtract[rows][cols];
    int resultMultiply[rows][cols];
    int resultHadamard[rows][cols];

    int transpose[cols][rows];
    transposeMatrix(rows, cols, matrixA, transpose);

    // Print original matrix
    printf("\nOriginal matrix:\n");
    printMatrix(rows, cols, matrixA);

    // Print transposed matrix
    printf("\nTranspose of the matrix:\n");
    printMatrix(cols, rows, transpose);

    addMatrices(rows, cols, matrixA, matrixB, resultAdd);
    subtractMatrices(rows, cols, matrixA, matrixB, resultSubtract);
    multiplyMatrices(rows, cols, matrixA, matrixB, resultMultiply);
    hadamardProduct(rows, cols, matrixA, matrixB, resultHadamard);

    printf("Matrix A:\n");
    printMatrix(rows, cols, matrixA);

    printf("\nMatrix B:\n");
    printMatrix(rows, cols, matrixB);

    printf("\nAddition Result:\n");
    printMatrix(rows, cols, resultAdd);

    printf("\nSubtraction Result:\n");
    printMatrix(rows, cols, resultSubtract);

    printf("\nMultiplication Result:\n");
    printMatrix(rows, cols, resultMultiply);

    printf("\nHadamard Product Result:\n");
    printMatrix(rows, cols, resultHadamard);

    printf("\n");

    int testCases[] = {16, 25, 36, 50, 81, 0, 1, -1};
    int numTests = 8;

    printf("Testing integerSquareRoot1:\n");
    for (int i = 0; i < numTests; i++)
    {
        int result = integerSquareRoot1(testCases[i]);
        if (result != -1)
        {
            printf("The integer square root of %d is %d.\n", testCases[i], result);
        }
        else
        {
            printf("No integer square root for %d.\n", testCases[i]);
        }
    }

    printf("\n");

    printf("Testing integerSquareRoot2:\n");
    for (int i = 0; i < numTests; i++)
    {
        int result = integerSquareRoot2(testCases[i]);
        if (result != -1)
        {
            printf("The integer square root of %d is %d.\n", testCases[i], result);
        }
        else
        {
            printf("No integer square root for %d.\n", testCases[i]);
        }
    }

    int year;

    year = 2024;

    if (isLeapYear(year))
    {
        printf("%d is a leap year.\n", year);
    }
    else
    {
        printf("%d is not a leap year.\n", year);
    }

    return 0;
}
